方法一：list
1、对每个带校验的单词都先与字符串进行比较，从而形成一组列表，为了后续速度该链表为递增链表
2、将链表从前到后进行排列，看是否能够形成一个覆盖全部单词且无缝的组合，如果有则记录

但是该方法性能类似于暴力破解，性能达不到，本地测试在2.8s左右

方法二：list_fast 该方案在思路上与方法一没有核心区别，但是做了如下优化
1、使用kmp算法优化在字符串中找到单词的性能――发现使用KMP之后性能反而劣化，这个需要进一步定位
2、观察了一个用例后，发现用例7在创建map时都已经过长，所以该方法并不可靠
