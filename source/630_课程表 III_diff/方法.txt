方法1：dp_2dim
思路
	为了简化讨论情况，首先需要将已有数组按照deadTime升序排列好。
	做一个二维数组，列索引为deadTime偏移，行索引为几种课程，那么[n,m]是指在deadTime为m时，只考虑前n种课程，能够满足的个数
	假设[n-1,……]这一行已经完成，此时来考虑[n,……]行
	假设n结点的costTime=2，DeadTime=5，下图中分别用/和|来分割
	n-1:  m0  m1 / m2  m3  m4  m5 | m6  m7  m8
		   1   1 /  2   3   3   3 |  3   3   3
	n  :  m0  m1 / m2  m3  m4  m5 | m6  m7  m8
		   X   X /  Y   Y   Y   Y |  Z   Z   Z
		
	首先来讨论/左侧的这些X，由于此时的时间比costTime小，因此本节点肯定不会被选上，所以[n, m0] = [n-1, m0]，从而得到下图
	n-1:  m0  m1 / m2  m3  m4  m5 | m6  m7  m8
		   1   1 /  2   3   3   3 |  3   3   3
	n  :  m0  m1 / m2  m3  m4  m5 | m6  m7  m8
		   1   1 /  Y   Y   Y   Y |  Z   Z   Z
	
	然后讨论/与|之间的Y，这是一个经典的0-1背包问题，
	如果选择本节点[n, m2] = [n-1, m0] + 1
	不选择本节点[n, m2] = [n-1, m2]
	综上所述，[n, m2]的最优解为max([n-1, m0] + 1, [n-1, m2])，从而得到下图
	n-1:  m0  m1 / m2  m3  m4  m5 | m6  m7  m8
		   1   1 /  2   3   3   3 |  3   3   3
	n  :  m0  m1 / m2  m3  m4  m5 | m6  m7  m8
		   1   1 /  2   3   3   4 |  Z   Z   Z 
		
	最后讨论|右侧数据Z，由于|右侧的数据都晚于deadTime，所以对于本节点来说不会再增长，因此[n, m6] = [n, m5]，从而得到下图
	n-1:  m0  m1 / m2  m3  m4  m5 | m6  m7  m8
		   1   1 /  2   3   3   3 |  3   3   3
	n  :  m0  m1 / m2  m3  m4  m5 | m6  m7  m8
		   1   1 /  2   3   3   4 |  4   4   4
结果：空间超限

方法2:dp_2dim_opti
思路：进一步分析dp_2dim可以看到，[n,……]仅与[n-1,……]有关，因此不需要保留更久远的历史信息
	  本方案是利用两个大数组循环使用
结果：时间超限

方法3：dp_1dim
思路：再进一步分析，发现[n, m]要么来自于[n, m-k]，要么来自于[n-1, m-w]，总结来说都是前面的数据来计算后面的数据
	因此我们可以将利用同一个数组来承载相邻的两组运算，但是要保证是从大到小的计算
	做到这点后，我们又发现/左侧的数据就可以节省下来，|右侧的数据也只有在本行的max比上一行的max大时需要更新
	而且第一行的初始化可以直接用0来替代，从而让代码看起来更和谐
结果：时间超限

方法4：greedy
1、首先排除那些自己花费的时间比自己的截止时间还要大的节点
2、按照deadTime升序排列
3、假设前i个结点已经做好了选择，在对i结点做抉择时有如下几种可能
	3.1 该结点能够放下，那啥也不说了，直接接纳这个结点
	3.2 该结点放不下时，
		3.2.1 如果该节点比历史上收纳的最大结点要小，那么我们可以删除掉那个最大的节点，使用该节点，从而保证获得一个更优化的收纳组合
		3.2.2 如果该节点比历史上收纳的节点都要大，果断放弃该节点